{"version":3,"sources":["components/MovieTitle.js","components/MovieData.js","components/Movie.js","components/Naves.js","components/ElementMovie.js","components/DetailsNaves.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["MovieTitle","nameTitle","MovieData","director","episode_id","to","Movie","state","movies","starships","axios","get","then","response","data","setState","results","className","this","map","user","title","Component","Naves","props","array","url","nombre","arrays","arr","name","model","starship_class","ElementMovie","naves","console","log","id","match","params","DetailsNaves","Routes","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAUeA,EARI,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACjB,OACI,6BACI,yCAAeA,K,QCaZC,EAXG,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAWC,EAAgB,EAAhBA,WAC5B,OACA,6BACI,wCAAcA,GACd,wCAAcD,GACd,kBAAC,IAAD,CAAME,GAAE,iBAAYD,IAApB,W,yBC8BOE,E,2MAlCbC,MAAQ,CACNC,OAAQ,GACRC,UAAW,I,mFAEQ,IAAD,OAElBC,IAAMC,IADM,+BACGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QACxCF,MAAK,SAACE,GACL,EAAKC,SAAS,CACZP,OAAQM,EAAKE,e,+BAOjB,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,OACdC,KAAKX,MAAMC,OAAOW,KAAI,SAACC,GAAD,OACnB,yBAAKH,UAAU,qEACf,yBAAKA,UAAU,aACX,4BAAI,kBAAC,EAAD,CAAYhB,UAAWmB,EAAKC,UAEpC,yBAAKJ,UAAU,aACX,8BAAM,kBAAC,EAAD,CAAWd,SAAUiB,EAAKjB,SAAUC,WAAYgB,EAAKhB,yB,GA1BvDkB,aCoCDC,E,YA5Bf,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KALVjB,MAAQ,CACRkB,MAAO,IAGY,E,kFAGO,IAAD,OAEfC,EADWR,KAAKM,MAAfG,OAEPjB,IAAMC,IAAIe,GAAKd,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QACxCF,MAAK,SAACgB,GACP,EAAKb,SAAS,CAAEU,MAAMG,S,+BAKTV,KAAKX,MAAMkB,MAAMC,IAA9B,IAEMG,EAAMX,KAAKX,MAAMkB,MACvB,OACM,6BACA,iDAAuBI,EAAIC,MAC3B,uCAAaD,EAAIE,OACjB,sCAAYF,EAAIG,gBAChB,wBAAIf,UAAU,gBAAe,kBAAC,IAAD,CAAMA,UAAU,oBAAoBZ,GAAG,mBAAvC,oB,GA1BvBiB,aCqCLW,E,YApCX,WAAYT,GAAQ,IAAD,8BACnB,4CAAMA,KALNjB,MAAQ,CACR2B,MAAO,IAGY,E,kFAIG,IAAD,OACjBC,QAAQC,IAAI,yBADK,IAETC,EAAOnB,KAAKM,MAAMc,MAAMC,OAAxBF,GACFX,EAAG,qCAAiCW,GAC1C3B,IAAMC,IAAIe,GAAKd,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QACxCF,MAAK,SAACE,GACP,EAAKC,SAAS,CACVmB,MAAOpB,EAAKL,iB,+BAOpB,OAEI,yBAAKQ,UAAU,kBACb,yBAAKA,UAAU,OACdC,KAAKX,MAAM2B,MAAMf,KAAI,SAACL,GAAD,OAClB,yBAAKG,UAAU,qEACb,yBAAKA,UAAU,aACX,4BACA,kBAAC,EAAD,CAAOU,OAAQb,gB,GA/BRQ,aC8BZkB,E,YA7BX,WAAYhB,GAAQ,IAAD,8BACnB,4CAAMA,KALNjB,MAAQ,GAIW,E,oHAUnB,OACE,iC,GAhBqBe,aCeZmB,EAVA,WACX,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtC,IACjC,kBAAC,IAAD,CAAOqC,KAAK,aAAaC,UAAWX,IACpC,kBAAC,IAAD,CAAOU,KAAK,qBAAqBC,UAAWJ,MCAzCK,MANf,WACE,OACE,kBAAC,EAAD,OCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MACvB,2DCVNY,IAASC,OAAO,kBAAC,IAAD,KAAe,kBAAC,EAAD,OAA0BC,SAASC,eAAe,SDyH3E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.3b269e00.chunk.js","sourcesContent":["import React from 'react';\n\nconst MovieTitle = ({nameTitle}) => {\n    return(\n        <div>\n            <span>Titulo: {nameTitle}</span>\n        </div>\n    );\n};\n\nexport default MovieTitle;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Link,\n    useLocation\n  } from \"react-router-dom\";\n\nconst MovieData = ({ director , episode_id}) => {\n    return(\n    <div>\n        <p>Episodio: {episode_id}</p>\n        <p>Director: {director}</p>\n        <Link to={`/naves/${episode_id}`}>Naves</Link>\n    </div>\n    );\n\n};\n\nexport default MovieData;","import React, { Component } from \"react\";\nimport MovieTitle from '../components/MovieTitle';\nimport MovieData from '../components/MovieData';\nimport './styles.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\n\nclass Movie extends Component {\n  state = {\n    movies: [],\n    starships: []\n  }\n  componentDidMount() {\n    const url = 'https://swapi.co/api/films/';\n    axios.get(url).then(response => response.data)\n    .then((data) => {\n      this.setState({ \n        movies: data.results,\n      })\n     })\n     \n  }\n  \n  render() {\n    return (\n      <div className=\"mt-5 container\">\n        <div className=\"row\">\n        {this.state.movies.map((user) => (\n            <div className=\"elemto col-md-12 shadow p-3 mb-5 bg-white rounded animated fadeIn\">\n            <div className=\"col-md-12\">\n                <h1><MovieTitle nameTitle={user.title}></MovieTitle></h1>\n            </div>\n            <div className=\"col-md-12\">\n                <span><MovieData director={user.director} episode_id={user.episode_id}></MovieData></span>\n            </div>\n        </div>  \n        ))}\n      </div> \n  </div>\n    );\n  }\n}\nexport default Movie;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.css';\nimport {\n    BrowserRouter as Router,\n    Link,\n    useLocation\n  } from \"react-router-dom\";\n\nclass Naves extends Component{\n    state = {\n    array: {}\n    }\n\n    constructor(props) {\n        super(props);\n        }\n        componentWillMount() {            \n        const {nombre} = this.props;\n        const url = nombre;\n        axios.get(url).then(response => response.data)\n        .then((arrays) => {\n        this.setState({ array:arrays })\n        })\n    }\n  \n    render() {\n        const urls = this.state.array.url;\n        var cadena = \"abcdefghij\";\n        const arr = this.state.array;\n        return (\n              <div>\n              <h4>Nombre de la nave:{arr.name}</h4>\n              <h4>Modelo: {arr.model}</h4>\n              <h4>Clase: {arr.starship_class}</h4>\n              <h4 className=\"btn btn-dark\"><Link className=\"estilo-boton-nave\" to=\"/naves-details/\">Ver MÃ¡s</Link></h4>\n              </div> \n           \n          );\n      }\n    }\n    \n    export default Naves;\n","import React, {Component} from 'react';\nimport Naves from '../components/Naves';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.css';\nimport axios from 'axios';\n\nclass ElementMovie extends Component {\n    state = {\n    naves: []\n    }\n\n    constructor(props) {\n    super(props);\n    }\n\n    componentWillMount() {\n        console.log('aqui en element Movie');\n        const { id } = this.props.match.params;\n        const url = `https://swapi.co/api/films/${id}`;\n        axios.get(url).then(response => response.data)\n        .then((data) => {\n        this.setState({ \n            naves: data.starships \n            })\n        })\n\n    }\n\n  render() {\n    return (\n      \n        <div className=\"mt-5 container\">\n          <div className=\"row\">\n          {this.state.naves.map((data) =>(\n              <div className=\"elemto col-md-12 shadow p-3 mb-5 bg-white rounded animated fadeIn\">\n                <div className=\"col-md-12\">\n                    <h1>\n                    <Naves nombre={data}></Naves>\n                    </h1>\n                </div>\n              </div>))}\n          </div> \n        </div>\n      );\n  }\n}\n\nexport default ElementMovie;","import React, {Component} from 'react';\n\nclass DetailsNaves extends Component {\n    state = {\n    \n    }\n    \n    constructor(props) {\n    super(props);\n    }\n\n    componentWillMount() {\n       \n\n    }\n\n  render() {\n    return (\n      <h1></h1>\n        /*\n        <div className=\"mt-5 container\">\n          <div className=\"row\">\n          {this.state.naves.map((data) =>(\n              <div className=\"elemto col-md-12 shadow p-3 mb-5 bg-white rounded animated fadeIn\">\n                <div className=\"col-md-12\">\n                    <h1>\n                    <Naves nombre={data}></Naves>\n                    </h1>\n                </div>\n              </div>))}\n          </div> \n        </div>*/\n      );\n  }\n}\n\nexport default DetailsNaves;","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport Movie from './components/Movie';\nimport ElementMovie from './components/ElementMovie';\nimport DetailsNaves from './components/DetailsNaves';\n\n\nconst Routes = () => {\n    return (\n        <Switch>\n            <Route exact path=\"/\" component={Movie} />\n            <Route path=\"/naves/:id\" component={ElementMovie} />\n            <Route path=\"/naves-details/:id\" component={DetailsNaves} />\n        </Switch>\n    )\n}\n\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Routes from './Routes';\n\n\nfunction App()  {\n  return ( \n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}